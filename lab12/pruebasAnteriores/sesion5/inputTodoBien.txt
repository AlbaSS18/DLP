# Variable and function definitions
i, j, n: int;
i, j, n, f, a98jha: double;
c, c: char;

# Empty function
def p(): { }

def f(n: int,r: double): int {
  	real: double;
  	c1, c2: char;  
	c1 = (char)n;
  	real = (double)c1 + (double)n + r;
  	p(); # Invocation as a statement
  	return (int)c1;
  	
  	# error: double; --> Las definiciones tienen que estar al principio
}

c: char;

def pruebaPrint(): int {
	
	# Print expressionComparation
  	print 5>0, 15>=0, 30<78, 20<=370, 10!=100, 10==20;
  	# Print expressionLogic
  	print (5&&7), 6 [90||23];
  	# Print expressionArithmetic
  	print 31+23, 5-90, 78*9, 8/8, (9[(double)8-9].i)%6;
  	# Print expressionReal, expressionInt, expressionChar, expressionUnary
  	print 12.3, 34.12E-3, 2., 3e3, 3E3, 3e3, 3e+3, 3e-3, .98, 34.12e-3, 90. ;
  	# Print expressionInt, expressionChar, expressionUnary
  	print 0, 123, 0, 12, 't', 'r', '.', '-', '~', '\n', '\t', '\126', -45, -43.9, -((90+8)||7)[89];
  	# Print expressionCast
  	print (int)4, (double)hola, (char)a, ((char)8[78.0][-90*9]);
  	# Print expressionNegation
  	print ! (9!=(9+vector)[5][5]);
  	# Print expressionFunctionInvocation
  	print gHi78U_j(1), g();
	
	return 56+9*(int)89.8;
}

def record (): {
	registro: struct {
    	integer: int;
    	integer: int;
    	character: char;
  	};
}

def pruebaInputAnidados(): double {

	# Input expressionComparation
  	input 5>0, 15>=0, 30<78, 20<=370, 10!=100, 10==20;
  	# Input expressionLogic
  	input (5&&7), 6 [90||23];
  	# Input expressionArithmetic
  	input 31+23, 5-90, 78*9, 8/8, (9[(double)8-9].i)%6;
  	# Input expressionReal, expressionInt, expressionChar, expressionUnary
  	input 12.3, 34.12E-3, 2., 3e3, 3E3, 3e3, 3e+3, 3e-3, .98, 34.12e-3, 90. ;
  	# Input expressionInt, expressionChar, expressionUnary
  	input 0, 123, 0, 12, 't', 'r', '.', '-', '~', '\n', '\t', '\126', -45, -43.9, -((90+8)||7)[89];
  	# Input expressionCast
  	input (int)4, (double)hola, (char)a, ((char)8[78.0][-90*9]);
  	# Input expressionNegation
  	input ! (9!=(9+vector)[5][5]);
  	# Input expressionFunctionInvocation
  	input gHi78U_j(1), g();

}

def pruebaIfWhileAnidados(): char {
	
	# if anidados 
  	if pair.integer == vector[0][0] || !(int)pair.character || i%2==0:
    	print 't', 'r', 'u', 'e', '\n';
    else {
    	if (h!=o+(7!=8)[9.0][u]):
    		print (paso);
    	else{
    		if ((ifAnidado2)):
    			print (no+paso);
    	}
    }			
    if pair.integer == vector[0][0]:
    	
  	
  	# While anidados
	while i<10 : {
    	while j<5 : {
    		if ((int)hola):
      			vector[i][j] = i + j;
      		j=j+1;
		}
		i=i+1;
  	} 	

}

def main(): {
	# Record
  	pair: struct {
    	integer: int;
    	character: char;
  	};
  	
  	# Array
  	vector: [10][5]int;
  	  
  	i=0;
  	j=0;
  	while i<10 : {
    	while j<5 : {
      		vector[i][j] = i + j;
      		j=j+1;
		}
		i=i+1;
  	} 	
  	
  	i=0;
	pair.character = '0';
  	pair.integer = 48;
  	while pair.integer >= i: {
    	if pair.integer == vector[0][0] || !(int)pair.character || i%2==0: {
      		print 't', 'r', 'u', 'e', '\n';
      		input 't', 'r', 'u', 'e', '\n';
      	}
    	else{ 
      		print 'f', 'a', 'l', 's', 'e', '\n';
      		input 't', 'r', 'u', 'e', '\n';
    	}
    	i=i+1;
  	}
  	print f(i, (double)i); # Invocation as an expression
  	input f(i, (double)i); # Invocation as an expression
  	vector[9][(int)4.3] = 5;
  	f(1, 2.2); # Invocation as a statement  	
  	
  	""" ¡Comentario
  		de varias
  		lineas! """
  		
  	
}

# def otraFuncion(): {} # --> el main es la última funcion